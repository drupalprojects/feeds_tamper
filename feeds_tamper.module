<?php

/**
 * Feeds related api hooks.
 */

/**
 * Implementation of hook_feeds_after_parse().
 *
 * This is the meat of the whole deal.  After every Feeds run, before going into
 * processing, this gets called and modifies the data based on the configuration.
 */
function feeds_tamper_feeds_after_parse(FeedsImporter $importer, FeedsSource $source) {
  $importer_instances = feeds_tamper_load_by_importer($source->importer->id, FALSE, TRUE);
  if (empty($importer_instances)) {
    return;
  }
  foreach ($source->batch->items as $item_key => &$item) {
    foreach ($importer_instances as $element_key => $instances) {
      foreach ($instances as $instance) {
        $plugin = feeds_tamper_get_plugin($instance->plugin_id);
        $is_array = is_array($item[$element_key]);

        if ($is_array && $plugin['multi'] == 'loop') {
          foreach ($item[$element_key] as &$i) {
            $plugin['callback']($source, $item_key, $element_key, $i, $instance->settings);
          }
        }
        elseif ($is_array && $plugin['multi'] == 'direct') {
          $plugin['callback']($source, $item_key, $element_key, $item[$element_key], $instance->settings);
        }
        elseif (!$is_array && $plugin['single'] != 'skip') {
          $plugin['callback']($source, $item_key, $element_key, $item[$element_key], $instance->settings);
        }
      }
    }
  }
}

/**
 * Implementation of hook_feeds_node_processor_targets_alter().
 */
function feeds_tamper_feeds_node_processor_targets_alter(&$targets, $content_type) {
  $targets['feeds_tamper_store'] = array(
    'name' => 'Temporary store',
    'description' => t('A field that stores the source data temporarily so that it can be used with the Feeds Tamper rewrite plugin.'),
  );
}

/**
 * Do nothing callback.
 */
function feeds_tamper_temp() {
}

/**
 * Feeds Tamper api functions.
 */

/**
 * Load all instances.
 */
function feeds_tamper_load_all_instances($load_disabled = FALSE) {
  $instances = array();
  if (function_exists('ctools_include')) {
    ctools_include('export');
    $configs = ctools_export_crud_load_all('feeds_tamper');
    foreach ($configs as $instance_id => $config) {
      if (!empty($config->id) && ($load_disabled || empty($config->disabled))) {
        $instances[$instance_id] = $config;
      }
    }
  }
  return $instances;
}

/**
 * Load a plugin instance by id.
 */
function feeds_tamper_load_instance($id) {
  ctools_include('export');
  return ctools_export_crud_load('feeds_tamper', $id);
}

/**
 * Save plugin instance.
 */
function feeds_tamper_save_instance($instance) {
  ctools_include('export');
  return ctools_export_crud_save('feeds_tamper', $instance);
}

/**
 * Delete plugin instance.
 */
function feeds_tamper_delete_instance($instance) {
  ctools_export_crud_delete('feeds_tamper', $instance);
}

function feeds_tamper_load_by_importer($importer_id, $disabled = FALSE, $lower = FALSE) {
  $mappings = feeds_importer($importer_id)->processor->config['mappings'];
  $sources = array();
  foreach ($mappings as $mapping) {
    $sources[] = $mapping['source'];
  }
  ctools_include('export');
  $t = ctools_export_load_object('feeds_tamper', 'conditions', array('importer' => $importer_id));
  $instances = array();
  foreach ($t as $i) {
    if (($disabled || empty($i->disabled)) && in_array($i->source, $sources)) {
      if ($lower) {
        $instances[drupal_strtolower($i->source)][] = $i;
      }
      else {
        $instances[$i->source][] = $i;
      }
    }
  }
  foreach ($instances as &$instance_list) {
    usort($instance_list, '_feeds_tamper_cmp');
  }
  return $instances;
}

function _feeds_tamper_cmp($a, $b) {
  if ($a->weight == $b->weight) {
    return 0;
  }
  return ($a->weight < $b->weight) ? -1 : 1;
}

/**
 * Gets all available plugins.
 *
 * @return
 *   An array where the keys are the plugin keys and the values
 *   are the plugin info arrays as defined in a plugin include file.
 */
function feeds_tamper_get_plugins() {
  ctools_include('plugins');
  static $defaults;
  if (empty($defaults)) {
    $info = feeds_tamper_ctools_plugin_type();
    $defaults = $info['plugins']['defaults'];
  }
  $plugins = ctools_get_plugins('feeds_tamper', 'plugins');
  foreach ($plugins as &$plugin) {
    $plugin += $defaults;
  }
  return $plugins;
}

/**
 * Gets a single plugin.
 *
 *  @param $id
 *    The id of a plugin.
 *
 * @return
 *   An array where the keys are the plugin keys and the values
 *   are the plugin info arrays as defined in a plugin include file.
 */
function feeds_tamper_get_plugin($id) {
  ctools_include('plugins');
  static $defaults;
  if (empty($defaults)) {
    $info = feeds_tamper_ctools_plugin_type();
    $defaults = $info['plugins']['defaults'];
  }
  return ctools_get_plugins('feeds_tamper', 'plugins', $id) + $defaults;
}

/**
 * CTools stuff.
 */

/**
 * Implementation of hook_ctools_plugin_api().
 */
function feeds_tamper_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds_tamper' && $api == 'plugins') {
    return array('version' => 2);
  }
}

/**
* Implementation of hook_ctools_plugin_directory().
*/
function feeds_tamper_ctools_plugin_directory($module, $plugin) {
  if ($module == 'feeds_tamper') {
    return 'plugins/';
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 *
 * Psuedo hook defintion plugin system options and defaults.
 *
 * @todo
 *   Enable caching once things are stable.
 */
function feeds_tamper_ctools_plugin_type() {
  return array(
    'plugins' => array(
      'cache' => FALSE,
      'use hook' => FALSE,
      'defaults' => array(
        'validate' => FALSE,
        'multi' => FALSE,
        'category' => 'Other',
        'single' => FALSE,
        'default description' => '',
      ),
    ),
  );
}

/**
 * Create a machine name.
 */
function feeds_tamper_make_machine($string) {
  return substr(preg_replace('/[^a-z0-9-]/', '_', strtolower($string)), 0, 127);
}

/**
 * Implementation of hook_perm().
 */
function feeds_tamper_perm() {
  return array('administer feeds_tamper');
}
