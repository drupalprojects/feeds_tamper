<?php

/**
 * @file
 * Tests for feeds_tamper.module.
 */

/**
 * Test Feeds Tamper.
 */
class FeedsTamperWebTestCase extends FeedsWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Feeds Tamper',
      'description' => 'Regression tests for Feeds Tamper.',
      'group' => 'Feeds Tamper',
    );
  }
  public function setUp() {
    parent::setUp(array('feeds_tamper', 'feeds_tamper_ui'), array('administer feeds_tamper'));
    // Set the front page to show 30 nodes so we can easily see what is aggregated.
    $edit = array('default_nodes_main' => 30);
    $this->drupalPost('admin/content/node-settings', $edit, 'Save configuration');
  }

  public function testBasic() {
    $this->createImporterConfiguration();
    $this->drupalGet(FEEDS_TAMPER_UI_BASE . '/list/syndication');
    $this->assertText('There are no mappings defined for this importer.');
    $this->addMappings('syndication',
      array(
        array(
          'source' => 'title',
          'target' => 'title',
          'unique' => FALSE,
        ),
        array(
          'source' => 'guid',
          'target' => 'guid',
          'unique' => TRUE,
        ),
        array(
          'source' => 'description',
          'target' => 'body',
          'unique' => FALSE,
        ),
      )
    );

    // Check that tamper operation exists on feeds page.
    $this->drupalGet(FEEDS_TAMPER_UI_FEEDS_BASE . '/list');
    $this->assertText('Edit | Export | Clone | Delete | Tamper');
    // Check that configure link exists on mappings page.
    $this->drupalGet(FEEDS_TAMPER_UI_FEEDS_BASE . '/edit/syndication/mapping');
    $this->assertRaw('<a href="/' . FEEDS_TAMPER_UI_BASE . '/list/syndication">Configure Feeds Tamper</a>');
    // Check help text when there are no mappings.
    $this->drupalGet(FEEDS_TAMPER_UI_BASE . '/list/syndication');
    $this->assertRaw('Configure plugins to modify Feeds data before it gets saved. Each <a href="/' . FEEDS_TAMPER_UI_FEEDS_BASE . '/edit/syndication/mapping">mapping</a> can be manipulated individually.');
    // Test basic plugin adding.
    $settings = array(
      'settings[mode]' => 0,
    );
    $id = $this->addTamperPlugin('syndication', 'title', 'convert_case', $settings);
    // Create feed node, running import automatically.
    $this->createFeedNode();
    // Assert that all titles were uppercased.
    $this->drupalGet('node');
    $this->assertUppercaseDevseedFeedContent();
    $this->toggleTamperPlugin('syndication', 'title', $id);
    $this->toggleTamperPlugin('syndication', 'title', $id, TRUE);
    $this->setTamperPluginWeight('syndication', 'title', $id, 2);
    $this->deleteTamperPlugin($id);
  }

  function addTamperPlugin($importer_id, $source, $plugin_id, $settings, $description = NULL, $id = NULL) {
    $plugin = feeds_tamper_get_plugin($plugin_id);
    $default_description = !empty($plugin['default description']) ? $plugin['default description'] : $plugin['name'];
    $default_id = feeds_tamper_make_machine($default_description);
    $url = FEEDS_TAMPER_UI_BASE . '/add/' . $importer_id . '/' . $source;
    $this->drupalPost($url, array('plugin_id' => $plugin_id), 'Choose');

    // Check that default values were added to form.
    $this->assertFieldByName('id', $default_id);
    $this->assertFieldByName('description', $default_description);
    // Set settings.
    $edit = array('plugin_id' => $plugin_id);
    if (!empty($description)) {
      $edit['description'] = $description;
    }
    if (!empty($id)) {
      $edit['id'] = $id;
    }
    $this->drupalPost(NULL, $edit + $settings, 'Add');
    $description = !empty($description) ? $description : $default_description;
    $id = !empty($id) ? $id : $default_id;
    $id = $importer_id . '-' . feeds_tamper_make_machine($source) . '-' . $id;
    $instance = feeds_tamper_load_instance($id);
    $source_name = feeds_tamper_ui_source_name($instance);
    $this->assertText('Plugin ' . $description . ' was successfully added to ' . $source_name . '.');
    return $id;
  }

  function toggleTamperPlugin($importer_id, $source, $id, $enable = FALSE) {
    $url = FEEDS_TAMPER_UI_BASE . '/list/' . $importer_id;
    $name = $source . '[table][' . $id . '][enabled]';
    $this->drupalPost($url, array($name => $enable), 'Save changes');
    $this->assertFieldByName($name, $enable);
    $this->assertText('Your changes have been saved.');
  }

  function setTamperPluginWeight($importer_id, $source, $id, $weight) {
    $url = FEEDS_TAMPER_UI_BASE . '/list/' . $importer_id;
    $name = $source . '[table][' . $id . '][weight-' . $id . ']';
    $this->drupalPost($url, array($name => $weight), 'Save changes');
    $this->assertFieldByName($name, $weight);
    $this->assertText('Your changes have been saved.');
  }

  function deleteTamperPlugin($id) {
    $url = FEEDS_TAMPER_UI_BASE . '/delete/' . $id;
    $this->drupalGet($url);
    $instance = feeds_tamper_load_instance($id);
    $this->assertText('Would you really like to delete the plugin ' . $instance->description . '?');
    $this->assertText('This action cannot be undone.');
    $this->drupalPost(NULL, array(), 'Delete');
    $source_name = feeds_tamper_ui_source_name($instance);
    $this->assertText('The plugin ' . $instance->description . ' has been deleted from ' . $source_name . '.');
  }

  function assertUppercaseDevseedFeedContent() {
    $this->assertText('OPEN ATRIUM TRANSLATION WORKFLOW: TWO WAY TRANSLATION UPDATES');
    $this->assertText("PERU&#039;S SOFTWARE FREEDOM DAY: IMPRESSIONS &amp; PHOTOS");
    $this->assertText('WEEK IN DC TECH: SEPTEMBER 21 EDITION');
    $this->assertText('INTEGRATING THE SITEMINDER ACCESS SYSTEM IN AN OPEN ATRIUM-BASED INTRANET');
    $this->assertText('OPEN DATA FOR MICROFINANCE: THE NEW MIXMARKET.ORG');
    $this->assertText('WEEK IN DC TECH: SEPTEMBER 28TH EDITION');
    $this->assertText('SEPTEMBER GEODC MEETUP TONIGHT');
    $this->assertText('MAPPING INNOVATION AT THE WORLD BANK WITH OPEN ATRIUM');
    $this->assertText('WEEK IN DC TECH: OCTOBER 5TH EDITION');
    $this->assertText('OPEN ATRIUM TRANSLATION WORKFLOW: TWO WAY TRANSLATION UPDATES');
  }
}
